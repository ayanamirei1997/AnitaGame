//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Anita_AnimationEntryWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Anita.AnimationEntry), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("Init", Init);
		L.RegFunction("InitFactory", InitFactory);
		L.RegFunction("CreateEntry", CreateEntry);
		L.RegFunction("DestroyEntry", DestroyEntry);
		L.RegFunction("And", And);
		L.RegFunction("Then", Then);
		L.RegFunction("For", For);
		L.RegFunction("With", With);
		L.RegFunction("Repeat", Repeat);
		L.RegFunction("Play", Play);
		L.RegFunction("Pause", Pause);
		L.RegFunction("Stop", Stop);
		L.RegFunction("Remove", Remove);
		L.RegFunction("LinearEasing", LinearEasing);
		L.RegFunction("CubicEasing", CubicEasing);
		L.RegFunction("ShakeEasing", ShakeEasing);
		L.RegFunction("ShakeSquaredEasing", ShakeSquaredEasing);
		L.RegFunction("BezierEasing", BezierEasing);
		L.RegFunction("DebugPrint", DebugPrint);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("easing", get_easing, set_easing);
		L.RegVar("evaluateOnStop", get_evaluateOnStop, set_evaluateOnStop);
		L.RegVar("property", get_property, null);
		L.RegVar("duration", get_duration, null);
		L.RegVar("timeElapsed", get_timeElapsed, null);
		L.RegVar("timeRemaining", get_timeRemaining, null);
		L.RegVar("repeatNum", get_repeatNum, null);
		L.RegVar("repeatNumRemaining", get_repeatNumRemaining, null);
		L.RegVar("totalDuration", get_totalDuration, null);
		L.RegVar("totalTimeRemaining", get_totalTimeRemaining, null);
		L.RegVar("status", get_status, null);
		L.RegVar("isPlaying", get_isPlaying, null);
		L.RegVar("isStopped", get_isStopped, null);
		L.RegFunction("EasingFunction", Anita_AnimationEntry_EasingFunction);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Init(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			Anita.AnimationEntry obj = (Anita.AnimationEntry)ToLua.CheckObject<Anita.AnimationEntry>(L, 1);
			Anita.IAnimationProperty arg0 = (Anita.IAnimationProperty)ToLua.CheckObject<Anita.IAnimationProperty>(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			Anita.AnimationEntry.EasingFunction arg2 = (Anita.AnimationEntry.EasingFunction)ToLua.CheckDelegate<Anita.AnimationEntry.EasingFunction>(L, 4);
			int arg3 = (int)LuaDLL.luaL_checknumber(L, 5);
			obj.Init(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InitFactory(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			Anita.AnimationEntry.InitFactory();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateEntry(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			Anita.IAnimationProperty arg0 = (Anita.IAnimationProperty)ToLua.CheckObject<Anita.IAnimationProperty>(L, 1);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
			Anita.AnimationEntry.EasingFunction arg2 = (Anita.AnimationEntry.EasingFunction)ToLua.CheckDelegate<Anita.AnimationEntry.EasingFunction>(L, 3);
			int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
			UnityEngine.Transform arg4 = (UnityEngine.Transform)ToLua.CheckObject<UnityEngine.Transform>(L, 5);
			Anita.AnimationEntry o = Anita.AnimationEntry.CreateEntry(arg0, arg1, arg2, arg3, arg4);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DestroyEntry(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Anita.AnimationEntry arg0 = (Anita.AnimationEntry)ToLua.CheckObject<Anita.AnimationEntry>(L, 1);
			Anita.AnimationEntry.DestroyEntry(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int And(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Anita.AnimationEntry obj = (Anita.AnimationEntry)ToLua.CheckObject<Anita.AnimationEntry>(L, 1);
				Anita.IAnimationProperty arg0 = (Anita.IAnimationProperty)ToLua.CheckObject<Anita.IAnimationProperty>(L, 2);
				Anita.AnimationEntry o = obj.And(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3)
			{
				Anita.AnimationEntry obj = (Anita.AnimationEntry)ToLua.CheckObject<Anita.AnimationEntry>(L, 1);
				Anita.IAnimationProperty arg0 = (Anita.IAnimationProperty)ToLua.CheckObject<Anita.IAnimationProperty>(L, 2);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
				Anita.AnimationEntry o = obj.And(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 4)
			{
				Anita.AnimationEntry obj = (Anita.AnimationEntry)ToLua.CheckObject<Anita.AnimationEntry>(L, 1);
				Anita.IAnimationProperty arg0 = (Anita.IAnimationProperty)ToLua.CheckObject<Anita.IAnimationProperty>(L, 2);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
				Anita.AnimationEntry.EasingFunction arg2 = (Anita.AnimationEntry.EasingFunction)ToLua.CheckDelegate<Anita.AnimationEntry.EasingFunction>(L, 4);
				Anita.AnimationEntry o = obj.And(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 5)
			{
				Anita.AnimationEntry obj = (Anita.AnimationEntry)ToLua.CheckObject<Anita.AnimationEntry>(L, 1);
				Anita.IAnimationProperty arg0 = (Anita.IAnimationProperty)ToLua.CheckObject<Anita.IAnimationProperty>(L, 2);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
				Anita.AnimationEntry.EasingFunction arg2 = (Anita.AnimationEntry.EasingFunction)ToLua.CheckDelegate<Anita.AnimationEntry.EasingFunction>(L, 4);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 5);
				Anita.AnimationEntry o = obj.And(arg0, arg1, arg2, arg3);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Anita.AnimationEntry.And");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Then(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Anita.AnimationEntry obj = (Anita.AnimationEntry)ToLua.CheckObject<Anita.AnimationEntry>(L, 1);
				Anita.IAnimationProperty arg0 = (Anita.IAnimationProperty)ToLua.CheckObject<Anita.IAnimationProperty>(L, 2);
				Anita.AnimationEntry o = obj.Then(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3)
			{
				Anita.AnimationEntry obj = (Anita.AnimationEntry)ToLua.CheckObject<Anita.AnimationEntry>(L, 1);
				Anita.IAnimationProperty arg0 = (Anita.IAnimationProperty)ToLua.CheckObject<Anita.IAnimationProperty>(L, 2);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
				Anita.AnimationEntry o = obj.Then(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 4)
			{
				Anita.AnimationEntry obj = (Anita.AnimationEntry)ToLua.CheckObject<Anita.AnimationEntry>(L, 1);
				Anita.IAnimationProperty arg0 = (Anita.IAnimationProperty)ToLua.CheckObject<Anita.IAnimationProperty>(L, 2);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
				Anita.AnimationEntry.EasingFunction arg2 = (Anita.AnimationEntry.EasingFunction)ToLua.CheckDelegate<Anita.AnimationEntry.EasingFunction>(L, 4);
				Anita.AnimationEntry o = obj.Then(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 5)
			{
				Anita.AnimationEntry obj = (Anita.AnimationEntry)ToLua.CheckObject<Anita.AnimationEntry>(L, 1);
				Anita.IAnimationProperty arg0 = (Anita.IAnimationProperty)ToLua.CheckObject<Anita.IAnimationProperty>(L, 2);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
				Anita.AnimationEntry.EasingFunction arg2 = (Anita.AnimationEntry.EasingFunction)ToLua.CheckDelegate<Anita.AnimationEntry.EasingFunction>(L, 4);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 5);
				Anita.AnimationEntry o = obj.Then(arg0, arg1, arg2, arg3);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Anita.AnimationEntry.Then");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int For(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Anita.AnimationEntry obj = (Anita.AnimationEntry)ToLua.CheckObject<Anita.AnimationEntry>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			Anita.AnimationEntry o = obj.For(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int With(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Anita.AnimationEntry obj = (Anita.AnimationEntry)ToLua.CheckObject<Anita.AnimationEntry>(L, 1);
			Anita.AnimationEntry.EasingFunction arg0 = (Anita.AnimationEntry.EasingFunction)ToLua.CheckDelegate<Anita.AnimationEntry.EasingFunction>(L, 2);
			Anita.AnimationEntry o = obj.With(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Repeat(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Anita.AnimationEntry obj = (Anita.AnimationEntry)ToLua.CheckObject<Anita.AnimationEntry>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			Anita.AnimationEntry o = obj.Repeat(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Play(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Anita.AnimationEntry obj = (Anita.AnimationEntry)ToLua.CheckObject<Anita.AnimationEntry>(L, 1);
			obj.Play();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Pause(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Anita.AnimationEntry obj = (Anita.AnimationEntry)ToLua.CheckObject<Anita.AnimationEntry>(L, 1);
			obj.Pause();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Stop(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Anita.AnimationEntry obj = (Anita.AnimationEntry)ToLua.CheckObject<Anita.AnimationEntry>(L, 1);
			obj.Stop();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Remove(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Anita.AnimationEntry obj = (Anita.AnimationEntry)ToLua.CheckObject<Anita.AnimationEntry>(L, 1);
			obj.Remove();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LinearEasing(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			Anita.AnimationEntry.EasingFunction o = Anita.AnimationEntry.LinearEasing();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CubicEasing(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 1);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
			Anita.AnimationEntry.EasingFunction o = Anita.AnimationEntry.CubicEasing(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShakeEasing(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 1);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
			Anita.AnimationEntry.EasingFunction o = Anita.AnimationEntry.ShakeEasing(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShakeSquaredEasing(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 1);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
			Anita.AnimationEntry.EasingFunction o = Anita.AnimationEntry.ShakeSquaredEasing(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BezierEasing(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 1);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
			Anita.AnimationEntry.EasingFunction o = Anita.AnimationEntry.BezierEasing(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DebugPrint(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Anita.AnimationEntry obj = (Anita.AnimationEntry)ToLua.CheckObject<Anita.AnimationEntry>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.DebugPrint(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_easing(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Anita.AnimationEntry obj = (Anita.AnimationEntry)o;
			Anita.AnimationEntry.EasingFunction ret = obj.easing;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index easing on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_evaluateOnStop(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Anita.AnimationEntry obj = (Anita.AnimationEntry)o;
			bool ret = obj.evaluateOnStop;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index evaluateOnStop on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_property(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Anita.AnimationEntry obj = (Anita.AnimationEntry)o;
			Anita.IAnimationProperty ret = obj.property;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index property on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_duration(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Anita.AnimationEntry obj = (Anita.AnimationEntry)o;
			float ret = obj.duration;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index duration on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_timeElapsed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Anita.AnimationEntry obj = (Anita.AnimationEntry)o;
			float ret = obj.timeElapsed;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index timeElapsed on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_timeRemaining(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Anita.AnimationEntry obj = (Anita.AnimationEntry)o;
			float ret = obj.timeRemaining;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index timeRemaining on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_repeatNum(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Anita.AnimationEntry obj = (Anita.AnimationEntry)o;
			int ret = obj.repeatNum;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index repeatNum on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_repeatNumRemaining(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Anita.AnimationEntry obj = (Anita.AnimationEntry)o;
			int ret = obj.repeatNumRemaining;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index repeatNumRemaining on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_totalDuration(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Anita.AnimationEntry obj = (Anita.AnimationEntry)o;
			float ret = obj.totalDuration;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index totalDuration on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_totalTimeRemaining(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Anita.AnimationEntry obj = (Anita.AnimationEntry)o;
			float ret = obj.totalTimeRemaining;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index totalTimeRemaining on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_status(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Anita.AnimationEntry obj = (Anita.AnimationEntry)o;
			Anita.AnimationEntryStatus ret = obj.status;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index status on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isPlaying(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Anita.AnimationEntry obj = (Anita.AnimationEntry)o;
			bool ret = obj.isPlaying;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isPlaying on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isStopped(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Anita.AnimationEntry obj = (Anita.AnimationEntry)o;
			bool ret = obj.isStopped;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isStopped on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_easing(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Anita.AnimationEntry obj = (Anita.AnimationEntry)o;
			Anita.AnimationEntry.EasingFunction arg0 = (Anita.AnimationEntry.EasingFunction)ToLua.CheckDelegate<Anita.AnimationEntry.EasingFunction>(L, 2);
			obj.easing = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index easing on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_evaluateOnStop(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Anita.AnimationEntry obj = (Anita.AnimationEntry)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.evaluateOnStop = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index evaluateOnStop on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Anita_AnimationEntry_EasingFunction(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<Anita.AnimationEntry.EasingFunction>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<Anita.AnimationEntry.EasingFunction>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

