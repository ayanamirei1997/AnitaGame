//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Anita_CharacterColor_TypeWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(Anita.CharacterColor.Type));
		L.RegVar("Base", get_Base, null);
		L.RegVar("Environment", get_Environment, null);
		L.RegFunction("IntToEnum", IntToEnum);
		L.EndEnum();
		TypeTraits<Anita.CharacterColor.Type>.Check = CheckType;
		StackTraits<Anita.CharacterColor.Type>.Push = Push;
	}

	static void Push(IntPtr L, Anita.CharacterColor.Type arg)
	{
		ToLua.Push(L, arg);
	}

	static bool CheckType(IntPtr L, int pos)
	{
		return TypeChecker.CheckEnumType(typeof(Anita.CharacterColor.Type), L, pos);
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Base(IntPtr L)
	{
		ToLua.Push(L, Anita.CharacterColor.Type.Base);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Environment(IntPtr L)
	{
		ToLua.Push(L, Anita.CharacterColor.Type.Environment);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
		Anita.CharacterColor.Type o = (Anita.CharacterColor.Type)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

