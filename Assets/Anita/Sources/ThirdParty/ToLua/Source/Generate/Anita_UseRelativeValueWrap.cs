//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Anita_UseRelativeValueWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Anita.UseRelativeValue), typeof(System.Object));
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Yes", get_Yes, set_Yes);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Yes(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, Anita.UseRelativeValue.Yes);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Yes(IntPtr L)
	{
		try
		{
			Anita.UseRelativeValue arg0 = (Anita.UseRelativeValue)ToLua.CheckObject<Anita.UseRelativeValue>(L, 2);
			Anita.UseRelativeValue.Yes = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

