//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Anita_VariablesWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Anita.Variables), typeof(System.Object));
		L.RegFunction("Get", Get);
		L.RegFunction("Set", Set);
		L.RegFunction("CopyFrom", CopyFrom);
		L.RegFunction("Reset", Reset);
		L.RegFunction("ToString", ToString);
		L.RegFunction("New", _CreateAnita_Variables);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("hash", get_hash, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateAnita_Variables(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Anita.Variables obj = new Anita.Variables();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Anita.Variables.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Get(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Anita.Variables obj = (Anita.Variables)ToLua.CheckObject<Anita.Variables>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			Anita.VariableEntry o = obj.Get(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Set(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			Anita.Variables obj = (Anita.Variables)ToLua.CheckObject<Anita.Variables>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			Anita.VariableType arg1 = (Anita.VariableType)ToLua.CheckObject(L, 3, typeof(Anita.VariableType));
			string arg2 = ToLua.CheckString(L, 4);
			obj.Set(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CopyFrom(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Anita.Variables obj = (Anita.Variables)ToLua.CheckObject<Anita.Variables>(L, 1);
			Anita.Variables arg0 = (Anita.Variables)ToLua.CheckObject<Anita.Variables>(L, 2);
			obj.CopyFrom(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Reset(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Anita.Variables obj = (Anita.Variables)ToLua.CheckObject<Anita.Variables>(L, 1);
			obj.Reset();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Anita.Variables obj = (Anita.Variables)ToLua.CheckObject<Anita.Variables>(L, 1);
			string o = obj.ToString();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_hash(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Anita.Variables obj = (Anita.Variables)o;
			ulong ret = obj.hash;
			LuaDLL.tolua_pushuint64(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index hash on a nil value");
		}
	}
}

