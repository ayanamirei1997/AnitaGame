//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Nova_PositionAnimationPropertyWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Nova.PositionAnimationProperty), typeof(Nova.LazyComputableAnimationProperty<UnityEngine.Vector3,UnityEngine.Vector3>));
		L.RegFunction("New", _CreateNova_PositionAnimationProperty);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateNova_PositionAnimationProperty(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckObject<UnityEngine.Transform>(L, 1);
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
				Nova.PositionAnimationProperty obj = new Nova.PositionAnimationProperty(arg0, arg1);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<UnityEngine.Vector3>(L, 3))
			{
				UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckObject<UnityEngine.Transform>(L, 1);
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
				UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
				Nova.PositionAnimationProperty obj = new Nova.PositionAnimationProperty(arg0, arg1, arg2);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<Nova.UseRelativeValue>(L, 3))
			{
				UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckObject<UnityEngine.Transform>(L, 1);
				UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
				Nova.UseRelativeValue arg2 = (Nova.UseRelativeValue)ToLua.ToObject(L, 3);
				Nova.PositionAnimationProperty obj = new Nova.PositionAnimationProperty(arg0, arg1, arg2);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Nova.PositionAnimationProperty.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

