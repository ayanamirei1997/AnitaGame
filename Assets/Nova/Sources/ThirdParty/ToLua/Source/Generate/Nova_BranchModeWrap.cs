//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Nova_BranchModeWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(Nova.BranchMode));
		L.RegVar("Normal", get_Normal, null);
		L.RegVar("Jump", get_Jump, null);
		L.RegVar("Show", get_Show, null);
		L.RegVar("Enable", get_Enable, null);
		L.RegFunction("IntToEnum", IntToEnum);
		L.EndEnum();
		TypeTraits<Nova.BranchMode>.Check = CheckType;
		StackTraits<Nova.BranchMode>.Push = Push;
	}

	static void Push(IntPtr L, Nova.BranchMode arg)
	{
		ToLua.Push(L, arg);
	}

	static bool CheckType(IntPtr L, int pos)
	{
		return TypeChecker.CheckEnumType(typeof(Nova.BranchMode), L, pos);
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Normal(IntPtr L)
	{
		ToLua.Push(L, Nova.BranchMode.Normal);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Jump(IntPtr L)
	{
		ToLua.Push(L, Nova.BranchMode.Jump);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Show(IntPtr L)
	{
		ToLua.Push(L, Nova.BranchMode.Show);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Enable(IntPtr L)
	{
		ToLua.Push(L, Nova.BranchMode.Enable);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
		Nova.BranchMode o = (Nova.BranchMode)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

