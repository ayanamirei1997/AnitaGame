//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Nova_CompositeSpriteControllerBaseWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Nova.CompositeSpriteControllerBase), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("PreloadPose", PreloadPose);
		L.RegFunction("UnpreloadPose", UnpreloadPose);
		L.RegFunction("SetPose", SetPose);
		L.RegFunction("SetImage", SetImage);
		L.RegFunction("ClearImage", ClearImage);
		L.RegFunction("GetRestoreData", GetRestoreData);
		L.RegFunction("Restore", Restore);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("imageFolder", get_imageFolder, set_imageFolder);
		L.RegVar("characterTextureMerger", get_characterTextureMerger, set_characterTextureMerger);
		L.RegVar("currentImageName", get_currentImageName, null);
		L.RegVar("textureChanger", get_textureChanger, null);
		L.RegVar("color", get_color, set_color);
		L.RegVar("restorableObjectName", get_restorableObjectName, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PreloadPose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Nova.CompositeSpriteControllerBase obj = (Nova.CompositeSpriteControllerBase)ToLua.CheckObject<Nova.CompositeSpriteControllerBase>(L, 1);
			LuaTable arg0 = ToLua.CheckLuaTable(L, 2);
			obj.PreloadPose(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnpreloadPose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Nova.CompositeSpriteControllerBase obj = (Nova.CompositeSpriteControllerBase)ToLua.CheckObject<Nova.CompositeSpriteControllerBase>(L, 1);
			LuaTable arg0 = ToLua.CheckLuaTable(L, 2);
			obj.UnpreloadPose(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetPose(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Nova.CompositeSpriteControllerBase obj = (Nova.CompositeSpriteControllerBase)ToLua.CheckObject<Nova.CompositeSpriteControllerBase>(L, 1);
				LuaTable arg0 = ToLua.CheckLuaTable(L, 2);
				obj.SetPose(arg0);
				return 0;
			}
			else if (count == 3)
			{
				Nova.CompositeSpriteControllerBase obj = (Nova.CompositeSpriteControllerBase)ToLua.CheckObject<Nova.CompositeSpriteControllerBase>(L, 1);
				LuaTable arg0 = ToLua.CheckLuaTable(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				obj.SetPose(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Nova.CompositeSpriteControllerBase.SetPose");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetImage(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Nova.CompositeSpriteControllerBase obj = (Nova.CompositeSpriteControllerBase)ToLua.CheckObject<Nova.CompositeSpriteControllerBase>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				obj.SetImage(arg0);
				return 0;
			}
			else if (count == 3)
			{
				Nova.CompositeSpriteControllerBase obj = (Nova.CompositeSpriteControllerBase)ToLua.CheckObject<Nova.CompositeSpriteControllerBase>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				obj.SetImage(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Nova.CompositeSpriteControllerBase.SetImage");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearImage(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				Nova.CompositeSpriteControllerBase obj = (Nova.CompositeSpriteControllerBase)ToLua.CheckObject<Nova.CompositeSpriteControllerBase>(L, 1);
				obj.ClearImage();
				return 0;
			}
			else if (count == 2)
			{
				Nova.CompositeSpriteControllerBase obj = (Nova.CompositeSpriteControllerBase)ToLua.CheckObject<Nova.CompositeSpriteControllerBase>(L, 1);
				bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
				obj.ClearImage(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Nova.CompositeSpriteControllerBase.ClearImage");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetRestoreData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Nova.CompositeSpriteControllerBase obj = (Nova.CompositeSpriteControllerBase)ToLua.CheckObject<Nova.CompositeSpriteControllerBase>(L, 1);
			Nova.IRestoreData o = obj.GetRestoreData();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Restore(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Nova.CompositeSpriteControllerBase obj = (Nova.CompositeSpriteControllerBase)ToLua.CheckObject<Nova.CompositeSpriteControllerBase>(L, 1);
			Nova.IRestoreData arg0 = (Nova.IRestoreData)ToLua.CheckObject<Nova.IRestoreData>(L, 2);
			obj.Restore(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_imageFolder(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Nova.CompositeSpriteControllerBase obj = (Nova.CompositeSpriteControllerBase)o;
			string ret = obj.imageFolder;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index imageFolder on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_characterTextureMerger(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Nova.CompositeSpriteControllerBase obj = (Nova.CompositeSpriteControllerBase)o;
			Nova.SpriteMerger ret = obj.characterTextureMerger;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index characterTextureMerger on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_currentImageName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Nova.CompositeSpriteControllerBase obj = (Nova.CompositeSpriteControllerBase)o;
			string ret = obj.currentImageName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index currentImageName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_textureChanger(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Nova.CompositeSpriteControllerBase obj = (Nova.CompositeSpriteControllerBase)o;
			Nova.OverlayTextureChangerBase ret = obj.textureChanger;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index textureChanger on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_color(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Nova.CompositeSpriteControllerBase obj = (Nova.CompositeSpriteControllerBase)o;
			UnityEngine.Color ret = obj.color;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index color on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_restorableObjectName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Nova.CompositeSpriteControllerBase obj = (Nova.CompositeSpriteControllerBase)o;
			string ret = obj.restorableObjectName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index restorableObjectName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_imageFolder(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Nova.CompositeSpriteControllerBase obj = (Nova.CompositeSpriteControllerBase)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.imageFolder = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index imageFolder on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_characterTextureMerger(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Nova.CompositeSpriteControllerBase obj = (Nova.CompositeSpriteControllerBase)o;
			Nova.SpriteMerger arg0 = (Nova.SpriteMerger)ToLua.CheckObject<Nova.SpriteMerger>(L, 2);
			obj.characterTextureMerger = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index characterTextureMerger on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_color(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Nova.CompositeSpriteControllerBase obj = (Nova.CompositeSpriteControllerBase)o;
			UnityEngine.Color arg0 = ToLua.ToColor(L, 2);
			obj.color = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index color on a nil value");
		}
	}
}

