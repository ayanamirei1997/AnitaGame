//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Nova_VariableTypeWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(Nova.VariableType));
		L.RegVar("Boolean", get_Boolean, null);
		L.RegVar("Number", get_Number, null);
		L.RegVar("String", get_String, null);
		L.RegFunction("IntToEnum", IntToEnum);
		L.EndEnum();
		TypeTraits<Nova.VariableType>.Check = CheckType;
		StackTraits<Nova.VariableType>.Push = Push;
	}

	static void Push(IntPtr L, Nova.VariableType arg)
	{
		ToLua.Push(L, arg);
	}

	static bool CheckType(IntPtr L, int pos)
	{
		return TypeChecker.CheckEnumType(typeof(Nova.VariableType), L, pos);
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Boolean(IntPtr L)
	{
		ToLua.Push(L, Nova.VariableType.Boolean);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Number(IntPtr L)
	{
		ToLua.Push(L, Nova.VariableType.Number);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_String(IntPtr L)
	{
		ToLua.Push(L, Nova.VariableType.String);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
		Nova.VariableType o = (Nova.VariableType)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

