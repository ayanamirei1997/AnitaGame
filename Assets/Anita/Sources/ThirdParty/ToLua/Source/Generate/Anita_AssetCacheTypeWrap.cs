//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Anita_AssetCacheTypeWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(Anita.AssetCacheType));
		L.RegVar("Image", get_Image, null);
		L.RegVar("StandingLayer", get_StandingLayer, null);
		L.RegVar("Timeline", get_Timeline, null);
		L.RegVar("Audio", get_Audio, null);
		L.RegFunction("IntToEnum", IntToEnum);
		L.EndEnum();
		TypeTraits<Anita.AssetCacheType>.Check = CheckType;
		StackTraits<Anita.AssetCacheType>.Push = Push;
	}

	static void Push(IntPtr L, Anita.AssetCacheType arg)
	{
		ToLua.Push(L, arg);
	}

	static bool CheckType(IntPtr L, int pos)
	{
		return TypeChecker.CheckEnumType(typeof(Anita.AssetCacheType), L, pos);
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Image(IntPtr L)
	{
		ToLua.Push(L, Anita.AssetCacheType.Image);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_StandingLayer(IntPtr L)
	{
		ToLua.Push(L, Anita.AssetCacheType.StandingLayer);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Timeline(IntPtr L)
	{
		ToLua.Push(L, Anita.AssetCacheType.Timeline);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Audio(IntPtr L)
	{
		ToLua.Push(L, Anita.AssetCacheType.Audio);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
		Anita.AssetCacheType o = (Anita.AssetCacheType)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

