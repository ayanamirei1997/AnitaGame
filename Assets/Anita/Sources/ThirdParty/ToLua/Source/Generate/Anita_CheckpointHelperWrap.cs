//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Anita_CheckpointHelperWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Anita.CheckpointHelper), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("RestrainCheckpoint", RestrainCheckpoint);
		L.RegFunction("EnsureCheckpointOnNextDialogue", EnsureCheckpointOnNextDialogue);
		L.RegFunction("UpdateGlobalSave", UpdateGlobalSave);
		L.RegFunction("GetGlobalVariable", GetGlobalVariable);
		L.RegFunction("SetGlobalVariable", SetGlobalVariable);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("WarningStepNumFromLastCheckpoint", get_WarningStepNumFromLastCheckpoint, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RestrainCheckpoint(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Anita.CheckpointHelper obj = (Anita.CheckpointHelper)ToLua.CheckObject<Anita.CheckpointHelper>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				obj.RestrainCheckpoint(arg0);
				return 0;
			}
			else if (count == 3)
			{
				Anita.CheckpointHelper obj = (Anita.CheckpointHelper)ToLua.CheckObject<Anita.CheckpointHelper>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				obj.RestrainCheckpoint(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Anita.CheckpointHelper.RestrainCheckpoint");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EnsureCheckpointOnNextDialogue(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Anita.CheckpointHelper obj = (Anita.CheckpointHelper)ToLua.CheckObject<Anita.CheckpointHelper>(L, 1);
			obj.EnsureCheckpointOnNextDialogue();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateGlobalSave(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Anita.CheckpointHelper obj = (Anita.CheckpointHelper)ToLua.CheckObject<Anita.CheckpointHelper>(L, 1);
			obj.UpdateGlobalSave();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetGlobalVariable(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Anita.CheckpointHelper obj = (Anita.CheckpointHelper)ToLua.CheckObject<Anita.CheckpointHelper>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			Anita.VariableEntry o = obj.GetGlobalVariable(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetGlobalVariable(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			Anita.CheckpointHelper obj = (Anita.CheckpointHelper)ToLua.CheckObject<Anita.CheckpointHelper>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			Anita.VariableType arg1 = (Anita.VariableType)ToLua.CheckObject(L, 3, typeof(Anita.VariableType));
			string arg2 = ToLua.CheckString(L, 4);
			obj.SetGlobalVariable(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_WarningStepNumFromLastCheckpoint(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, Anita.CheckpointHelper.WarningStepNumFromLastCheckpoint);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

